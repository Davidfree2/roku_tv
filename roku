#!/usr/env/python3
#this is a single file that can be moved to your .local/bin folder.
#from there you can use chmod +x to make it executable and call it from anywhere in your file system
#just use the 'roku' command to run it from anywhere




import os
import time
import tkinter as tk

class Roku:
    def __init__(self, ip_address, port):
        self.ip_address = ip_address
        self.port = port

    def roku_home(self):
        print("executing-------")
        try:
            roku_command = f'''curl -d '' "http://{self.ip_address}:{self.port}/keypress/Home"'''
            os.system(roku_command)
            print('success!')
        except:
            print("failed. Is the ip address and port correct? is curl installed on machine?")

    def roku_volume_up(self):
        print("executing-------")
        try:
            roku_command = f'''curl -d '' "http://{self.ip_address}:{self.port}/keypress/VolumeUp"'''
            os.system(roku_command)
            print('success!')
        except:
            print("failed. Is the ip address and port correct? is curl installed on machine?")

    def roku_volume_down(self):
        print("executing-------")
        try:
            roku_command = f'''curl -d '' "http://{self.ip_address}:{self.port}/keypress/VolumeDown"'''
            os.system(roku_command)
            print('success!')
        except:
            print("failed. Is the ip address and port correct? is curl installed on machine?")

    def roku_mute_unmute(self):
        print("executing-------")
        try:
            roku_command = f'''curl -d '' "http://{self.ip_address}:{self.port}/keypress/VolumeMute"'''
            os.system(roku_command)
            print('success!')
        except:
            print("failed. Is the ip address and port correct? is curl installed on machine?")

    def roku_power_off(self):
        print("executing-------")
        try:
            roku_command = f'''curl -d '' "http://{self.ip_address}:{self.port}/keypress/PowerOff"'''
            os.system(roku_command)
            print('success!')
        except:
            print("failed. Is the ip address and port correct? is curl installed on machine?")

    def fast_forward(self):
        print("executing-------")
        try:
            roku_command = f'''curl -d '' "http://{self.ip_address}:{self.port}/keypress/Fwd"'''
            os.system(roku_command)
            print('success!')
        except:
            print("failed. Is the ip address and port correct? is curl installed on machine?")

    def reverse(self):
        print("executing-------")
        try:
            roku_command = f'''curl -d '' "http://{self.ip_address}:{self.port}/keypress/Rev"'''
            os.system(roku_command)
            print('success!')
        except:
            print("failed. Is the ip address and port correct? is curl installed on machine?")

    def select(self):
        print("executing-------")
        try:
            roku_command = f'''curl -d '' "http://{self.ip_address}:{self.port}/keypress/Select"'''
            os.system(roku_command)
            print('success!')
        except:
            print("failed. Is the ip address and port correct? is curl installed on machine?")

    def left(self):
        print("executing-------")
        try:
            roku_command = f'''curl -d '' "http://{self.ip_address}:{self.port}/keypress/Left"'''
            os.system(roku_command)
            print('success!')
        except:
            print("failed. Is the ip address and port correct? is curl installed on machine?")

    def right(self):
        print("executing-------")
        try:
            roku_command = f'''curl -d '' "http://{self.ip_address}:{self.port}/keypress/Right"'''
            os.system(roku_command)
            print('success!')
        except:
            print("failed. Is the ip address and port correct? is curl installed on machine?")

    def up(self):
        print("executing-------")
        try:
            roku_command = f'''curl -d '' "http://{self.ip_address}:{self.port}/keypress/Up"'''
            os.system(roku_command)
            print('success!')
        except:
            print("failed. Is the ip address and port correct? is curl installed on machine?")

    def down(self):
        print("executing-------")
        try:
            roku_command = f'''curl -d '' "http://{self.ip_address}:{self.port}/keypress/Down"'''
            os.system(roku_command)
            print('success!')
        except:
            print("failed. Is the ip address and port correct? is curl installed on machine?")

    def info(self):
        print("executing-------")
        try:
            roku_command = f'''curl -d '' "http://{self.ip_address}:{self.port}/keypress/Info"'''
            os.system(roku_command)
            print('success!')
        except:
            print("failed. Is the ip address and port correct? is curl installed on machine?")

    def find_remote(self):
        print("executing-------")
        try:
            roku_command = f'''curl -d '' "http://{self.ip_address}:{self.port}/keypress/FindRemote"'''
            os.system(roku_command)
            print('success!')
        except:
            print("failed. Is the ip address and port correct? is curl installed on machine?")

    def hdmi1(self):
        print("executing-------")
        try:
            roku_command = f'''curl -d '' "http://{self.ip_address}:{self.port}/keypress/InputHDMI1"'''
            os.system(roku_command)
            print('success!')
        except:
            print("failed. Is the ip address and port correct? is curl installed on machine?")

    def hdmi2(self):
        print("executing-------")
        try:
            roku_command = f'''curl -d '' "http://{self.ip_address}:{self.port}/keypress/InputHDMI2"'''
            os.system(roku_command)
            print('success!')
        except:
            print("failed. Is the ip address and port correct? is curl installed on machine?")

    def hdmi3(self):
        print("executing-------")
        try:
            roku_command = f'''curl -d '' "http://{self.ip_address}:{self.port}/keypress/InputHDMI3"'''
            os.system(roku_command)
            print('success!')
        except:
            print("failed. Is the ip address and port correct? is curl installed on machine?")

    def hdmi4(self):
        print("executing-------")
        try:
            roku_command = f'''curl -d '' "http://{self.ip_address}:{self.port}/keypress/InputHDMI4"'''
            os.system(roku_command)
            print('success!')
        except:
            print("failed. Is the ip address and port correct? is curl installed on machine?")

    def back(self):
        print("executing-------")
        try:
            roku_command = f'''curl -d '' "http://{self.ip_address}:{self.port}/keypress/Back"'''
            os.system(roku_command)
            print('success!')
        except:
            print("failed. Is the ip address and port correct? is curl installed on machine?")

class Gui:
    def __init__(self, window, device):
        self.window = window
        self.title = self.window.title("Roku Remote")
        self.frame = tk.Frame(self.window, bg='#662d91')

        self.device = device

        self.left = tk.Button(self.frame, text='left', command=self.device.left)
        self.right = tk.Button(self.frame, text='right',command=self.device.right)
        self.up = tk.Button(self.frame, text='up', command=self.device.up)
        self.down = tk.Button(self.frame, text='down', command=self.device.down)
        self.home = tk.Button(self.frame, text='home', command=self.device.roku_home)
        self.rev = tk.Button(self.frame, text='reverse', command=self.device.reverse)
        self.forward = tk.Button(self.frame, text='forward', command=self.device.fast_forward)
        self.select = tk.Button(self.frame, text='select', command=self.device.select)

        self.volume_up = tk.Button(self.frame, text='volume up', command=self.device.roku_volume_up)
        self.volume_down = tk.Button(self.frame, text='volume down', command=self.device.roku_volume_down)
        self.mute = tk.Button(self.frame, text='mute', command=self.device.roku_mute_unmute)
        self.back = tk.Button(self.frame, text='back', command=self.device.back)

        self.up.grid(row=0, columnspan=2, pady=10, ipady=20, ipadx=20)
        self.left.grid(row=1,  pady=10, ipady=20, ipadx=20)
        self.right.grid(row=1, column=1, pady=10, ipady=20, ipadx=20)
        self.down.grid(row=2, columnspan=2,  pady=10, ipady=20, ipadx=20)
        self.home.grid(row=4, columnspan=2,  pady=10, ipady=20, ipadx=20)
        self.rev.grid(row=3, column=0,  pady=10, ipady=20, ipadx=20)
        self.forward.grid(row=3, column=1,  pady=10, ipady=20, ipadx=20)
        self.select.grid(row=5, columnspan=2,  pady=10, ipady=20, ipadx=20)

        self.volume_up.grid(row=6, column=0,  pady=10, ipady=20, ipadx=20)
        self.volume_down.grid(row=6, column=1,  pady=10, ipady=20, ipadx=20)
        self.mute.grid(row=7, columnspan=2,  pady=10, ipady=20, ipadx=20)
        self.back.grid(row=8, columnspan=2,  pady=10, ipady=20, ipadx=20)

        self.frame.pack(expand=True)







my_device = Roku("192.168.1.64", "8060")
root = tk.Tk()
app = Gui(root, my_device)
root.mainloop()
